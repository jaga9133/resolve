The review that takes place in a pull request is critical for improving code quality. Only merge branches through pull requests that pass your review process. Avoid merging branches to the main branch without a pull request.

Reviews in pull requests take time to complete. Your team should agree on what's expected from pull request creators and reviewers. Distribute reviewer responsibilities to share ideas across your team and spread out knowledge of your codebase.

Some suggestions for successful pull requests:

Two reviewers is an optimal number based on research.
If your team already has a code review process, bring pull requests into what you're already doing.
Take care assigning the same reviewers to a large number of pull requests. Pull requests work better when reviewer responsibilities are shared across the team.
Provide enough detail in the description to quickly bring reviewers up to speed with your changes.
Include a build or linked version of your changes running in a staged environment with your pull request. Others can easily test the changes.
Keep a high quality, up-to-date main branch
The code in your main branch should pass tests, build cleanly, and always be current. Your main branch needs these qualities so that feature branches created by your team start from a known good version of code.

Set up a branch policy for your main branch that:

Requires a pull request to merge code. This approach prevents direct pushes to the main branch and ensures discussion of proposed changes.
Automatically adds reviewers when a pull request is created. The added team members review the code and comment on the changes in the pull request.
Update the CI triggers for all pipelines. Designer pipelines can be edited in the web. YAML pipelines can be edited in their respective repositories.

In-flight pull requests
Retarget each open pull request to the new default branch.

Existing clones
New clones of the repository will get the new default branch. After the switch, everyone with an existing clone should run git remote set-head origin -a (replacing origin with the name of their remote if it's something else) to update their view of the remote's default branch. Future new branches should be based on the new default.

Incoming links
Some bookmarks, documents, and other non-code files which point to files in Azure Repos will need to be updated. The branch name for a file or directory can appear in the URL.

If a URL contains a querystring for version (e.g. &version=GBmybranchname), then that URL should be updated. Fortunately, most links to the default branch will not have a version segment and can be left as-is. Also, once you delete the old default branch, attempts to navigate to it will be taken to the new default anyways.
