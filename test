Distributed version control systems like Gii:t give you flexibility in how you use version control to share and manage code. Your team should find a balance between this flexibility and the need to collaborate and share code in a consistent manner.

Team members publish, share, review, and iterate on code changes through Git branches shared with others. Adopt a branching strategy for your team. You can collaborate better and spend less time managing version control and more time developing code.

The following branching strategies are based on the way we use Git here at Microsoft. For more information, see How we use Git at Microsoft.

Keep your branch strategy simple
Keep your branch strategy simple. Build your strategy from these three concepts:

Use feature branches for all new features and bug fixes.
Merge feature branches into the main branch using pull requests.
Keep a high quality, up-to-date main branch.
hi how r you.
The default branch is the first branch that Git will check out on a fresh clone. Also, pull requests target this branch by default.

We'll walk through the process of changing the default branch. We'll also cover additional things you must consider and update when making this change. Finally, we'll look at a tool for easing the transition.

Set a new default branch
 Note

This step requires you to EditGit repository Policies permissions.

Configure your Git repo to use a different default branch to merge code into when your team creates new pull requests. You can use a branch other than main for new changes or change your main line of development in your repo. To change the default branch name for new repositories, see All repositories settings and policies.
